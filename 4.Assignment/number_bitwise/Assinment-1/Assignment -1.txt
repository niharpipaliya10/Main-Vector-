 1. What is Embedded systems ?
--> An embedded system is a combination of computer hardware and software designed for a          specific function.

 2. What is software and hardware ?
-->In computing, hardware refers to the physical components of a computer system, like the keyboard, mouse, and monitor. Software, on the other hand, is the set of instructions or programs that tell the hardware what to do, enabling it to perform tasks.

 3. What is operating system ?
-->An operating system (OS) is software that manages a computer's hardware and software resources

 4. What is  Programming language ?
-->A programming language is a formal language used to create a set of instructions that a computer can follow to perform a specific task

 5.What is role of C  in embedded system.
-->to provide low-level control over hardware and its efficiency in resource-constrained environments.

 6. What is cross compiler and native compiler ?
--> The act of compiling applications to run on a different computer system is referred to as ‚Äúcross compiling‚Äù
-->Native compilers are specialized programs that take high-level, human-readable source code and translate it into low-level machine code, specifically designed for the target platform's hardware and operating system.

 7. Explain cat ,mkdir ,cc, rmdir , mv, rm, cd 
command with example.
-->. 1.cat (Concatenate and display files):
       Example: cat myfile.txt
     2. mkdir (Make directory): 
       Example: mkdir mynewdirectory
    3. cc (C compiler):
       Example: cc myfile.c -o myprogram
    4. rmdir (Remove directory):
       Example: rmdir empty_directory
    5. mv (Move or rename):
       Example (move): mv myfile.txt /path/to/new/location
    6. rm (Remove):
       Example (remove file):rm myfile.txt
       rm -r is a powerful command and can delete all the contents of a directory           	recursively. Use it with caution. 
    7. cd (Change directory):
       Example (change to a subdirectory): cd mydirectory

 8. Diffrence b/w refrence path and absolute path.
-->Absolute paths always start with the root directory and provide the full path to the file or directory.
-->relative paths may point to different locations depending on the current directory

 9. Write a C program without main function .
-->yes, In gcc but we need to compile in different way.

 10. Explain types of error with example. 
-->two type error.
-->1.compile time error:- this error generated by compiler.
-->2.run time error:- this error generated by os.

11. Write compilation stages and command .
-->1.preprocessor:- cc -E p1.c -o p1.i
-->2.translators:- cc -S p1.i -o p1.s
-->3.linker  :-  cc -c p1.s -o p1.o
-->4.linker:- cc p1.o -o a.out

 12. What is task of pre-processor stage .
--> it includes header file
--> remove the comment
--> replacement of macros
-->conditional compilation

 13. What is Fatal error , Linked error , FPE error , 
explain with program .
--> A fatal error is a type of error that stops the compilation process completely. It usually occurs when the compiler cannot proceed, such as when a required file is missing.
ex:-
   #include "myheader.h"  // This file does not exist

int main() {
    return 0;
}

-->A linker error happens after successful compilation, during the linking stage. It usually occurs when:
1.A function is declared but not defined.
2.The object code cannot be properly linked.
ex:-
#include <stdio.h>

void myFunction();  // Declaration

int main() {
    myFunction();    // Call
    return 0;
}

// Definition is missing


-->FPE stands for Floating Point Exception. It usually happens at runtime, due to:
1.Division by zero (float or integer).
2.Invalid floating-point operations.
ex:- 
#include <stdio.h>

int main() {
    int a = 10;
    int b = 0;
    int c = a / b;  // Division by zero
    printf("%d\n", c);
    return 0;
}



14. What is data type , rules to declare variables .
-->A data type defines the type of data a variable can store. It tells the compiler:
   1.What kind of value the variable will hold.
   2.How much memory to allocate.
   3.What operations can be done on that data.
Rules :-1.must begin with a letter (A‚ÄìZ or a‚Äìz) or underscore (_)
2.Can contain letters, digits, and underscores
3.Cannot use C keywords as variable names
4.Variable must be declared before use
5.Use appropriate data types


15. What is range of signed char and unsigned char .
--> signed char :--128 to 127
--> unsigned:-0 to 255

16.  What is data type , rules to declare variables.
--> ans 14 

17.  Write block diagram of your Btech or Mtech 
project with explanation .

18.  What is typecasting explain with example.
-->Typecasting is the process of converting one data type to another manually in C. It is also called type conversion.
There are two types:
1.Implicit Typecasting (done by the compiler automatically)
2.Explicit Typecasting (done by the programmer manually)

19. Explain break, return , continue with program . 
-->1. break Statement
The break statement is used to exit a loop or switch statement immediately.
Example: Using break in a loop
#include <stdio.h>

int main() {
    for (int i = 1; i <= 5; i++) {
        if (i == 3) {
            break;  // loop stops when i = 3
        }
        printf("i = %d\n", i);
    }
    return 0;
}
-->2. continue Statement
The continue statement skips the current iteration and moves to the next iteration of the loop.

üîπ Example: Using continue
#include <stdio.h>

int main() {
    for (int i = 1; i <= 5; i++) {
        if (i == 3) {
            continue;  // skip when i = 3
        }
        printf("i = %d\n", i);
    }
    return 0;
}
-->3. return Statement
The return statement is used to exit a function and optionally return a value to the calling function.

üîπ Example: Using return in main()
#include <stdio.h>

int main() {
    printf("Hello\n");

    return 0;  // program ends here

    printf("This won't print");  // unreachable code
}

 

20. What is volatile , explain with example .
-->Do not optimize this variable, its value can change at any time outside the current program (like by hardware or an interrupt).‚Äù
ex:-#include <stdio.h>

volatile int flag = 0;

int main() {
    while (flag == 0) {
        // Keep checking, because 'flag' might change outside
    }
    printf("Exited loop\n");
    return 0;
}




21. Explain forward goto with example .
-->The goto statement is used to jump from one part of the program to another using a label.
syntax:-
goto label_name;
// some code
label_name:
   // destination code
ex:-
#include <stdio.h>

int main() {
    printf("Start\n");

    goto skip;  // Jumping forward to the label

    printf("This line is skipped.\n");

skip:
    printf("Reached the label.\n");

    return 0;
}


22. Explain all  bitwise operator with example.
-->Bitwise operators work directly on the binary bits (0 and 1) of integer values. These are very fast and useful for low-level operations like:
-->Setting/clearing/toggling specific bits
-->Working with hardware registers
-->Optimizing memory
1. Bitwise AND (&)
Rule: Only 1 & 1 = 1, otherwise 0
2. Bitwise OR (|)
Rule: 1 | 1 = 1, 1 | 0 = 1, 0 | 1 = 1, 0 | 0 = 0
3. Bitwise XOR (^)
Rule: Same bits ‚Üí 0, Different bits ‚Üí 1
4. Bitwise NOT (~) ‚Äî One‚Äôs Complement
Rule: Flips all bits (0 ‚Üí 1, 1 ‚Üí 0)
5. Left Shift (<<)
Shifts bits to the left, inserting 0s on the right.
6. Right Shift (>>)
Shifts bits to the right, discards rightmost bits

example:-
#include <stdio.h>

int main() {
    int a = 5; // 00000101
    int b = 3; // 00000011

    printf("a & b = %d\n", a & b);   // 1
    printf("a | b = %d\n", a | b);   // 7
    printf("a ^ b = %d\n", a ^ b);   // 6
    printf("~a = %d\n", ~a);         // -6 (in 2‚Äôs complement)
    printf("a << 1 = %d\n", a << 1); // 10
    printf("a >> 1 = %d\n", a >> 1); // 2

    return 0;
}




23. What is code optimaization . 
-->Code Optimization is the process of improving the performance or efficiency of code ‚Äî without changing its output or behavior. It is done to make the code:
->Run faster
->Use less memory
->Consume less power (important in embedded systems)
->Use fewer resources (like CPU, cycles, etc.)

   

24. Write all step of IEEE754 for float and double. 
-->Binary represents of real nymber base on step follow IEEE754 Standard. process that below mention :-
1 converte real number into binary Formate
2 convent Binary into standard Binary 
Bit    xe^+-y
whene
is significant
y is exponent
3 Add or substract exponent part with Standard bias number for float 7F and double 3FF.
4 Result of 3rd  step put in exponent Pant
5 Fill the significant part with significant bits from left to right.
6 Pret sign bit o for +ve and -Ve number

 
25.  What is pointer ,application of pointers.
-->A pointer is a variable that stores the memory address of another variable. Instead of holding a data value directly, a pointer points to the location in memory where the data is stored.
1.. Dynamic Memory Allocation
2. Passing Arguments to Functions (Call by Reference)
3. Arrays and Strings Manipulation
4. Function Pointers
5. Linked Lists, Trees, and Graphs
6. Efficient Memory Usage and Performance Optimization














